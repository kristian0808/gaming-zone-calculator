This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-24T10:38:12.901Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
eslint.config.js
index.html
package.json
public/vite.svg
README.md
src/App.css
src/App.jsx
src/assets/react.svg
src/index.css
src/main.jsx
src/TransactionCalculator.jsx
vite.config.js

================================================================
Files
================================================================

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "gaming-zone-calculator",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@tailwindcss/vite": "^4.0.15",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "tailwindcss": "^4.0.15"
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^15.15.0",
    "vite": "^6.2.0"
  }
}

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: README.md
================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript and enable type-aware lint rules. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.

================
File: src/App.css
================
@import "tailwindcss";

/* #root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
} */

/* .logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
} */

================
File: src/App.jsx
================
import { useState } from 'react'
import reactLogo from './assets/react.svg'
import viteLogo from '/vite.svg'
import './App.css'
import TransactionCalculator from './TransactionCalculator'

function App() {
  const [count, setCount] = useState(0)

  return (
    <>
        <TransactionCalculator />  
    </>
  )
}

export default App

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/index.css
================
/* :root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
} */

================
File: src/main.jsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

================
File: src/TransactionCalculator.jsx
================
import React, { useState } from 'react';

const TransactionCalculator = () => {
    // Exchange rates (simplified for MVP)
    const exchangeRates = {
        EUR: 1,
        USD: 1.08,
        LEK: 103.5
    };

    // Common currency denominations
    const commonDenominations = {
        EUR: [5, 10, 20, 50, 100],
        USD: [5, 10, 20, 50, 100],
        LEK: [200, 500, 1000, 2000, 5000]
    };

    // Product catalog (predefined list of items - prices in EUR as base currency)
    const productCatalog = [
        { name: "Coca Cola", price: 1.50 },
        { name: "Pepsi", price: 1.50 },
        { name: "Water", price: 1.00 },
        { name: "Coffee", price: 1.20 },
        { name: "Energy Drink", price: 2.50 },
        { name: "Chips", price: 1.80 },
        { name: "Chocolate Bar", price: 1.20 },
        { name: "Sandwich", price: 3.50 },
        { name: "Pizza Slice", price: 2.50 },
        { name: "Hot Dog", price: 3.00 },
        { name: "Burger", price: 4.50 },
        { name: "Fries", price: 2.00 },
        { name: "Ice Cream", price: 2.00 },
        { name: "Donut", price: 1.50 },
        { name: "Popcorn", price: 2.00 }
    ];

    // State management
    const [hours, setHours] = useState(0);
    const [minutes, setMinutes] = useState(0);
    const [pcRate, setPcRate] = useState(2); // Default PC hourly rate in EUR
    const [directPcCost, setDirectPcCost] = useState('');
    const [useDirectCost, setUseDirectCost] = useState(true); // Default to direct cost entry
    const [foodItems, setFoodItems] = useState([]);
    const [newFoodItem, setNewFoodItem] = useState('');
    const [newFoodPrice, setNewFoodPrice] = useState('');
    const [newFoodQuantity, setNewFoodQuantity] = useState(1);
    const [searchTerm, setSearchTerm] = useState('');
    const [showProductList, setShowProductList] = useState(false);
    const [amountPaid, setAmountPaid] = useState('');
    const [currency, setCurrency] = useState('EUR');

    // Filter products based on search term and convert prices to current currency
    const filteredProducts = productCatalog
        .filter(product => product.name.toLowerCase().includes(searchTerm.toLowerCase()))
        .map(product => ({
            ...product,
            price: Math.round(product.price * exchangeRates[currency])
        }));

    // Calculate PC usage cost
    const calculatePCCost = () => {
        if (useDirectCost && directPcCost) {
            return Math.round(parseFloat(directPcCost));
        } else {
            const totalMinutes = (hours * 60) + parseInt(minutes);
            const hourlyRate = pcRate; // in selected currency
            return Math.round(hourlyRate * totalMinutes / 60);
        }
    };

    // Add food item to the list
    const addFoodItem = (item = null, price = null) => {
        if (item && price) {
            // Add predefined item with current quantity
            setFoodItems([
                ...foodItems,
                {
                    name: item,
                    price: Math.round(price), // Round to whole number
                    quantity: newFoodQuantity,
                    totalPrice: Math.round(price) * newFoodQuantity
                }
            ]);
            setShowProductList(false);
            setSearchTerm('');
            setNewFoodQuantity(1); // Reset quantity after adding
        } else if (newFoodItem && newFoodPrice) {
            // Add custom item with current quantity
            setFoodItems([
                ...foodItems,
                {
                    name: newFoodItem,
                    price: Math.round(parseFloat(newFoodPrice)), // Round to whole number
                    quantity: newFoodQuantity,
                    totalPrice: Math.round(parseFloat(newFoodPrice)) * newFoodQuantity
                }
            ]);
            setNewFoodItem('');
            setNewFoodPrice('');
            setNewFoodQuantity(1); // Reset quantity after adding
        }
    };

    // Remove food item from the list
    const removeFoodItem = (index) => {
        const updatedItems = [...foodItems];
        updatedItems.splice(index, 1);
        setFoodItems(updatedItems);
    };

    // Update item quantity
    const updateQuantity = (index, newQuantity) => {
        if (newQuantity < 1) return; // Prevent quantity less than 1

        const updatedItems = [...foodItems];
        updatedItems[index].quantity = newQuantity;
        updatedItems[index].totalPrice = Math.round(updatedItems[index].price * newQuantity);
        setFoodItems(updatedItems);
    };

    // Calculate food cost
    const calculateFoodCost = () => {
        return Math.round(foodItems.reduce((total, item) => total + item.totalPrice, 0));
    };

    // Calculate total cost
    const calculateTotal = () => {
        const pcCost = parseInt(calculatePCCost());
        const foodCost = parseInt(calculateFoodCost());
        return pcCost + foodCost;
    };

    // Calculate change
    const calculateChange = () => {
        if (!amountPaid) return 0;
        const total = calculateTotal();
        const paid = Math.round(parseFloat(amountPaid));
        return paid >= total ? paid - total : 0;
    };

    // Add denomination to amount paid
    const addDenomination = (value) => {
        const currentAmount = parseFloat(amountPaid) || 0;
        setAmountPaid((currentAmount + value).toString());
    };

    // Format price based on currency
    const formatPrice = (price) => {
        const roundedPrice = Math.round(price);
        switch (currency) {
            case 'EUR': return `€${roundedPrice}`;
            case 'USD': return `$${roundedPrice}`;
            case 'LEK': return `${roundedPrice} LEK`;
            default: return `€${roundedPrice}`;
        }
    };

    // Handle currency change
    const handleCurrencyChange = (newCurrency) => {
        setCurrency(newCurrency);

        // Convert all existing food items to the new currency
        if (foodItems.length > 0) {
            const updatedItems = foodItems.map(item => {
                // First convert back to EUR (base currency)
                const priceInEur = item.price / exchangeRates[currency];
                // Then convert to new currency
                const newPrice = Math.round(priceInEur * exchangeRates[newCurrency]);
                return {
                    ...item,
                    price: newPrice,
                    totalPrice: newPrice * item.quantity
                };
            });
            setFoodItems(updatedItems);
        }

        // Convert direct PC cost if it exists
        if (directPcCost) {
            const pcCostInEur = parseFloat(directPcCost) / exchangeRates[currency];
            setDirectPcCost(Math.round(pcCostInEur * exchangeRates[newCurrency]).toString());
        }

        // Convert hourly rate
        const rateInEur = pcRate / exchangeRates[currency];
        setPcRate(Math.round(rateInEur * exchangeRates[newCurrency]));

        // Convert amount paid if it exists
        if (amountPaid) {
            const paidInEur = parseFloat(amountPaid) / exchangeRates[currency];
            setAmountPaid(Math.round(paidInEur * exchangeRates[newCurrency]).toString());
        }
    };

    // Reset form for new transaction
    const resetForm = () => {
        setHours(0);
        setMinutes(0);
        setFoodItems([]);
        setAmountPaid('');
        setDirectPcCost('');
        setSearchTerm('');
        setShowProductList(false);
    };

    return (
        <div className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-lg">
            <h1 className="text-2xl font-bold mb-6 text-center">Gaming Zone Calculator</h1>

            {/* PC Usage Section */}
            <div className="mb-6 p-4 bg-gray-50 rounded-md">
                <h2 className="text-lg font-semibold mb-2">PC Usage</h2>

                <div className="mb-2">
                    <label className="flex items-center cursor-pointer">
                        <input
                            type="checkbox"
                            checked={useDirectCost}
                            onChange={() => setUseDirectCost(!useDirectCost)}
                            className="mr-2"
                        />
                        <span className="text-sm">Enter PC cost directly</span>
                    </label>
                </div>

                {useDirectCost ? (
                    <div className="mb-2">
                        <label className="block text-sm mb-1">PC Cost</label>
                        <input
                            type="number"
                            min="0"
                            step="1"
                            value={directPcCost}
                            onChange={(e) => setDirectPcCost(e.target.value)}
                            className="w-full p-2 border rounded"
                            placeholder="Enter cost from PC management software"
                        />
                    </div>
                ) : (
                    <>
                        <div className="flex gap-2 mb-2">
                            <div className="flex-1">
                                <label className="block text-sm mb-1">Hours</label>
                                <input
                                    type="number"
                                    min="0"
                                    value={hours}
                                    onChange={(e) => setHours(parseInt(e.target.value) || 0)}
                                    className="w-full p-2 border rounded"
                                />
                            </div>
                            <div className="flex-1">
                                <label className="block text-sm mb-1">Minutes</label>
                                <input
                                    type="number"
                                    min="0"
                                    max="59"
                                    value={minutes}
                                    onChange={(e) => setMinutes(parseInt(e.target.value) || 0)}
                                    className="w-full p-2 border rounded"
                                />
                            </div>
                        </div>
                        <div className="mb-2">
                            <label className="block text-sm mb-1">Hourly Rate</label>
                            <input
                                type="number"
                                min="0"
                                step="0.1"
                                value={pcRate}
                                onChange={(e) => setPcRate(parseFloat(e.target.value) || 0)}
                                className="w-full p-2 border rounded"
                            />
                        </div>
                    </>
                )}

                <div className="text-right font-semibold">
                    PC Cost: {formatPrice(calculatePCCost())}
                </div>
            </div>

            {/* Food Items Section */}
            <div className="mb-6 p-4 bg-gray-50 rounded-md">
                <h2 className="text-lg font-semibold mb-2">Food & Drinks</h2>

                {/* Search and Quick Add */}
                <div className="mb-4">
                    <div className="relative">
                        <input
                            type="text"
                            placeholder="Search products..."
                            value={searchTerm}
                            onChange={(e) => {
                                setSearchTerm(e.target.value);
                                setShowProductList(true);
                            }}
                            onFocus={() => setShowProductList(true)}
                            className="w-full p-2 border rounded mb-1"
                        />
                        {showProductList && searchTerm && (
                            <div className="absolute z-10 w-full bg-white border rounded shadow-lg max-h-40 overflow-y-auto">
                                {filteredProducts.length > 0 ? (
                                    filteredProducts.map((product, index) => (
                                        <div
                                            key={index}
                                            className="p-2 hover:bg-gray-100 cursor-pointer flex justify-between items-center"
                                            onClick={() => addFoodItem(product.name, product.price)}
                                        >
                                            <span>{product.name}</span>
                                            <span className="font-semibold">{formatPrice(product.price)}</span>
                                        </div>
                                    ))
                                ) : (
                                    <div className="p-2 text-gray-500">No products found</div>
                                )}
                            </div>
                        )}
                    </div>
                    <div className="text-sm text-gray-500">
                        Search or manually enter items below
                    </div>
                </div>

                {/* Manual Entry */}
                <div className="flex gap-2 mb-2">
                    <div className="flex-1">
                        <input
                            type="text"
                            placeholder="Item name"
                            value={newFoodItem}
                            onChange={(e) => setNewFoodItem(e.target.value)}
                            className="w-full p-2 border rounded"
                        />
                    </div>
                    <div className="flex-1">
                        <input
                            type="number"
                            min="0"
                            step="1"
                            value={newFoodPrice}
                            onChange={(e) => setNewFoodPrice(e.target.value)}
                            className="w-full p-2 border rounded"
                        />
                    </div>
                    <button
                        onClick={() => addFoodItem()}
                        className="px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                    >
                        Add
                    </button>
                </div>

                {/* Food Items List */}
                <div className="max-h-40 overflow-y-auto mb-2">
                    {foodItems.length > 0 ? (
                        <ul className="divide-y">
                            {foodItems.map((item, index) => (
                                <li key={index} className="py-2 flex justify-between items-center">
                                    <div className="flex items-center">
                                        <span className="mr-2">{item.name}</span>
                                        <span className="text-gray-500 text-sm">({formatPrice(item.price)} each)</span>
                                    </div>
                                    <div className="flex items-center gap-2">
                                        <div className="flex items-center border rounded">
                                            <button
                                                className="w-6 h-6 bg-gray-200 flex items-center justify-center hover:bg-gray-300 rounded-l"
                                                onClick={() => updateQuantity(index, item.quantity - 1)}
                                            >
                                                -
                                            </button>
                                            <div className="w-8 h-6 bg-white border-x flex items-center justify-center">
                                                {item.quantity}
                                            </div>
                                            <button
                                                className="w-6 h-6 bg-gray-200 flex items-center justify-center hover:bg-gray-300 rounded-r"
                                                onClick={() => updateQuantity(index, item.quantity + 1)}
                                            >
                                                +
                                            </button>
                                        </div>
                                        <span className="font-semibold">{formatPrice(item.totalPrice)}</span>
                                        <button
                                            onClick={() => removeFoodItem(index)}
                                            className="text-red-500 hover:text-red-700"
                                        >
                                            ✕
                                        </button>
                                    </div>
                                </li>
                            ))}
                        </ul>
                    ) : (
                        <p className="text-gray-500 text-center py-2">No items added</p>
                    )}
                </div>
                <div className="text-right font-semibold">
                    Food Total: {formatPrice(calculateFoodCost())}
                </div>
            </div>

            {/* Payment Section */}
            <div className="mb-6 p-4 bg-gray-50 rounded-md">
                <h2 className="text-lg font-semibold mb-2">Payment</h2>
                <div className="flex gap-2 mb-4">
                    <div className="flex-1">
                        <label className="block text-sm mb-1">Currency</label>
                        <select
                            value={currency}
                            onChange={(e) => handleCurrencyChange(e.target.value)}
                            className="w-full p-2 border rounded"
                        >
                            <option value="EUR">Euro (€)</option>
                            <option value="USD">US Dollar ($)</option>
                            <option value="LEK">Albanian Lek</option>
                        </select>
                    </div>
                    <div className="flex-1">
                        <label className="block text-sm mb-1">Amount Paid</label>
                        <input
                            type="number"
                            min="0"
                            step="1"
                            value={amountPaid}
                            onChange={(e) => setAmountPaid(e.target.value)}
                            className="w-full p-2 border rounded"
                        />
                    </div>
                </div>

                {/* Quick Payment Buttons */}
                <div className="mb-2">
                    <label className="block text-sm mb-1">Quick Payment</label>
                    <div className="grid grid-cols-3 md:grid-cols-6 gap-2">
                        {commonDenominations[currency].map((value, index) => (
                            <button
                                key={index}
                                onClick={() => addDenomination(value)}
                                className="px-3 py-2 bg-blue-100 text-blue-800 rounded hover:bg-blue-200 text-center"
                            >
                                {formatPrice(value)}
                            </button>
                        ))}
                        <button
                            onClick={() => {
                                setAmountPaid('');
                            }}
                            className="px-3 py-2 bg-red-100 text-red-800 rounded hover:bg-red-200 text-center"
                        >
                            Reset Amount
                        </button>
                    </div>
                </div>
            </div>

            {/* Totals Section */}
            <div className="p-4 bg-blue-50 rounded-md">
                <div className="flex justify-between mb-2">
                    <span className="font-semibold">Total:</span>
                    <span className="font-bold">{formatPrice(calculateTotal())}</span>
                </div>
                <div className="flex justify-between mb-2">
                    <span className="font-semibold">Paid:</span>
                    <span>{formatPrice(amountPaid || 0)}</span>
                </div>
                <div className="flex justify-between text-lg">
                    <span className="font-semibold">Change:</span>
                    <span className="font-bold">{formatPrice(calculateChange())}</span>
                </div>
            </div>

            {/* Quick Reset Button */}
            <button
                onClick={resetForm}
                className="w-full mt-4 p-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300"
            >
                New Transaction
            </button>
        </div>
    );
};

export default TransactionCalculator;

================
File: vite.config.js
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'


// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
})
